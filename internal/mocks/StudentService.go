// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	request "student_go/internal/dto/request"

	mock "github.com/stretchr/testify/mock"

	response "student_go/internal/dto/response"
)

// StudentServiceMock is an autogenerated mock type for the Service type
type StudentServiceMock struct {
	mock.Mock
}

type StudentServiceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *StudentServiceMock) EXPECT() *StudentServiceMock_Expecter {
	return &StudentServiceMock_Expecter{mock: &_m.Mock}
}

// AddCourseToStudent provides a mock function with given fields: studentId, courseId
func (_m *StudentServiceMock) AddCourseToStudent(studentId uint, courseId uint) (*response.StudentResponse, error) {
	ret := _m.Called(studentId, courseId)

	if len(ret) == 0 {
		panic("no return value specified for AddCourseToStudent")
	}

	var r0 *response.StudentResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, uint) (*response.StudentResponse, error)); ok {
		return rf(studentId, courseId)
	}
	if rf, ok := ret.Get(0).(func(uint, uint) *response.StudentResponse); ok {
		r0 = rf(studentId, courseId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*response.StudentResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, uint) error); ok {
		r1 = rf(studentId, courseId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StudentServiceMock_AddCourseToStudent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddCourseToStudent'
type StudentServiceMock_AddCourseToStudent_Call struct {
	*mock.Call
}

// AddCourseToStudent is a helper method to define mock.On call
//   - studentId uint
//   - courseId uint
func (_e *StudentServiceMock_Expecter) AddCourseToStudent(studentId interface{}, courseId interface{}) *StudentServiceMock_AddCourseToStudent_Call {
	return &StudentServiceMock_AddCourseToStudent_Call{Call: _e.mock.On("AddCourseToStudent", studentId, courseId)}
}

func (_c *StudentServiceMock_AddCourseToStudent_Call) Run(run func(studentId uint, courseId uint)) *StudentServiceMock_AddCourseToStudent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint), args[1].(uint))
	})
	return _c
}

func (_c *StudentServiceMock_AddCourseToStudent_Call) Return(_a0 *response.StudentResponse, _a1 error) *StudentServiceMock_AddCourseToStudent_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StudentServiceMock_AddCourseToStudent_Call) RunAndReturn(run func(uint, uint) (*response.StudentResponse, error)) *StudentServiceMock_AddCourseToStudent_Call {
	_c.Call.Return(run)
	return _c
}

// Count provides a mock function with no fields
func (_m *StudentServiceMock) Count() (int, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Count")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func() (int, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StudentServiceMock_Count_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Count'
type StudentServiceMock_Count_Call struct {
	*mock.Call
}

// Count is a helper method to define mock.On call
func (_e *StudentServiceMock_Expecter) Count() *StudentServiceMock_Count_Call {
	return &StudentServiceMock_Count_Call{Call: _e.mock.On("Count")}
}

func (_c *StudentServiceMock_Count_Call) Run(run func()) *StudentServiceMock_Count_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *StudentServiceMock_Count_Call) Return(_a0 int, _a1 error) *StudentServiceMock_Count_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StudentServiceMock_Count_Call) RunAndReturn(run func() (int, error)) *StudentServiceMock_Count_Call {
	_c.Call.Return(run)
	return _c
}

// CreateStudent provides a mock function with given fields: input
func (_m *StudentServiceMock) CreateStudent(input request.StudentRequest) (*response.StudentResponse, error) {
	ret := _m.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for CreateStudent")
	}

	var r0 *response.StudentResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(request.StudentRequest) (*response.StudentResponse, error)); ok {
		return rf(input)
	}
	if rf, ok := ret.Get(0).(func(request.StudentRequest) *response.StudentResponse); ok {
		r0 = rf(input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*response.StudentResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(request.StudentRequest) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StudentServiceMock_CreateStudent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateStudent'
type StudentServiceMock_CreateStudent_Call struct {
	*mock.Call
}

// CreateStudent is a helper method to define mock.On call
//   - input request.StudentRequest
func (_e *StudentServiceMock_Expecter) CreateStudent(input interface{}) *StudentServiceMock_CreateStudent_Call {
	return &StudentServiceMock_CreateStudent_Call{Call: _e.mock.On("CreateStudent", input)}
}

func (_c *StudentServiceMock_CreateStudent_Call) Run(run func(input request.StudentRequest)) *StudentServiceMock_CreateStudent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(request.StudentRequest))
	})
	return _c
}

func (_c *StudentServiceMock_CreateStudent_Call) Return(_a0 *response.StudentResponse, _a1 error) *StudentServiceMock_CreateStudent_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StudentServiceMock_CreateStudent_Call) RunAndReturn(run func(request.StudentRequest) (*response.StudentResponse, error)) *StudentServiceMock_CreateStudent_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteStudentById provides a mock function with given fields: id
func (_m *StudentServiceMock) DeleteStudentById(id uint) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteStudentById")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StudentServiceMock_DeleteStudentById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteStudentById'
type StudentServiceMock_DeleteStudentById_Call struct {
	*mock.Call
}

// DeleteStudentById is a helper method to define mock.On call
//   - id uint
func (_e *StudentServiceMock_Expecter) DeleteStudentById(id interface{}) *StudentServiceMock_DeleteStudentById_Call {
	return &StudentServiceMock_DeleteStudentById_Call{Call: _e.mock.On("DeleteStudentById", id)}
}

func (_c *StudentServiceMock_DeleteStudentById_Call) Run(run func(id uint)) *StudentServiceMock_DeleteStudentById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *StudentServiceMock_DeleteStudentById_Call) Return(_a0 error) *StudentServiceMock_DeleteStudentById_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StudentServiceMock_DeleteStudentById_Call) RunAndReturn(run func(uint) error) *StudentServiceMock_DeleteStudentById_Call {
	_c.Call.Return(run)
	return _c
}

// FindAllStudent provides a mock function with given fields: page, limit
func (_m *StudentServiceMock) FindAllStudent(page int, limit int) ([]*response.StudentResponse, error) {
	ret := _m.Called(page, limit)

	if len(ret) == 0 {
		panic("no return value specified for FindAllStudent")
	}

	var r0 []*response.StudentResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) ([]*response.StudentResponse, error)); ok {
		return rf(page, limit)
	}
	if rf, ok := ret.Get(0).(func(int, int) []*response.StudentResponse); ok {
		r0 = rf(page, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*response.StudentResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(page, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StudentServiceMock_FindAllStudent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAllStudent'
type StudentServiceMock_FindAllStudent_Call struct {
	*mock.Call
}

// FindAllStudent is a helper method to define mock.On call
//   - page int
//   - limit int
func (_e *StudentServiceMock_Expecter) FindAllStudent(page interface{}, limit interface{}) *StudentServiceMock_FindAllStudent_Call {
	return &StudentServiceMock_FindAllStudent_Call{Call: _e.mock.On("FindAllStudent", page, limit)}
}

func (_c *StudentServiceMock_FindAllStudent_Call) Run(run func(page int, limit int)) *StudentServiceMock_FindAllStudent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(int))
	})
	return _c
}

func (_c *StudentServiceMock_FindAllStudent_Call) Return(_a0 []*response.StudentResponse, _a1 error) *StudentServiceMock_FindAllStudent_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StudentServiceMock_FindAllStudent_Call) RunAndReturn(run func(int, int) ([]*response.StudentResponse, error)) *StudentServiceMock_FindAllStudent_Call {
	_c.Call.Return(run)
	return _c
}

// FindStudentById provides a mock function with given fields: id
func (_m *StudentServiceMock) FindStudentById(id uint) (*response.StudentResponse, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for FindStudentById")
	}

	var r0 *response.StudentResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*response.StudentResponse, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) *response.StudentResponse); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*response.StudentResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StudentServiceMock_FindStudentById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindStudentById'
type StudentServiceMock_FindStudentById_Call struct {
	*mock.Call
}

// FindStudentById is a helper method to define mock.On call
//   - id uint
func (_e *StudentServiceMock_Expecter) FindStudentById(id interface{}) *StudentServiceMock_FindStudentById_Call {
	return &StudentServiceMock_FindStudentById_Call{Call: _e.mock.On("FindStudentById", id)}
}

func (_c *StudentServiceMock_FindStudentById_Call) Run(run func(id uint)) *StudentServiceMock_FindStudentById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *StudentServiceMock_FindStudentById_Call) Return(_a0 *response.StudentResponse, _a1 error) *StudentServiceMock_FindStudentById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StudentServiceMock_FindStudentById_Call) RunAndReturn(run func(uint) (*response.StudentResponse, error)) *StudentServiceMock_FindStudentById_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateStudent provides a mock function with given fields: id, input
func (_m *StudentServiceMock) UpdateStudent(id uint, input request.StudentRequest) (*response.StudentResponse, error) {
	ret := _m.Called(id, input)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStudent")
	}

	var r0 *response.StudentResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, request.StudentRequest) (*response.StudentResponse, error)); ok {
		return rf(id, input)
	}
	if rf, ok := ret.Get(0).(func(uint, request.StudentRequest) *response.StudentResponse); ok {
		r0 = rf(id, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*response.StudentResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, request.StudentRequest) error); ok {
		r1 = rf(id, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StudentServiceMock_UpdateStudent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStudent'
type StudentServiceMock_UpdateStudent_Call struct {
	*mock.Call
}

// UpdateStudent is a helper method to define mock.On call
//   - id uint
//   - input request.StudentRequest
func (_e *StudentServiceMock_Expecter) UpdateStudent(id interface{}, input interface{}) *StudentServiceMock_UpdateStudent_Call {
	return &StudentServiceMock_UpdateStudent_Call{Call: _e.mock.On("UpdateStudent", id, input)}
}

func (_c *StudentServiceMock_UpdateStudent_Call) Run(run func(id uint, input request.StudentRequest)) *StudentServiceMock_UpdateStudent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint), args[1].(request.StudentRequest))
	})
	return _c
}

func (_c *StudentServiceMock_UpdateStudent_Call) Return(_a0 *response.StudentResponse, _a1 error) *StudentServiceMock_UpdateStudent_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StudentServiceMock_UpdateStudent_Call) RunAndReturn(run func(uint, request.StudentRequest) (*response.StudentResponse, error)) *StudentServiceMock_UpdateStudent_Call {
	_c.Call.Return(run)
	return _c
}

// NewStudentServiceMock creates a new instance of StudentServiceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStudentServiceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *StudentServiceMock {
	mock := &StudentServiceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
