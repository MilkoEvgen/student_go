// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	request "student_go/internal/dto/request"

	mock "github.com/stretchr/testify/mock"

	response "student_go/internal/dto/response"
)

// DepartmentServiceMock is an autogenerated mock type for the Service type
type DepartmentServiceMock struct {
	mock.Mock
}

type DepartmentServiceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *DepartmentServiceMock) EXPECT() *DepartmentServiceMock_Expecter {
	return &DepartmentServiceMock_Expecter{mock: &_m.Mock}
}

// Count provides a mock function with no fields
func (_m *DepartmentServiceMock) Count() (int, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Count")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func() (int, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DepartmentServiceMock_Count_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Count'
type DepartmentServiceMock_Count_Call struct {
	*mock.Call
}

// Count is a helper method to define mock.On call
func (_e *DepartmentServiceMock_Expecter) Count() *DepartmentServiceMock_Count_Call {
	return &DepartmentServiceMock_Count_Call{Call: _e.mock.On("Count")}
}

func (_c *DepartmentServiceMock_Count_Call) Run(run func()) *DepartmentServiceMock_Count_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DepartmentServiceMock_Count_Call) Return(_a0 int, _a1 error) *DepartmentServiceMock_Count_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DepartmentServiceMock_Count_Call) RunAndReturn(run func() (int, error)) *DepartmentServiceMock_Count_Call {
	_c.Call.Return(run)
	return _c
}

// CreateDepartment provides a mock function with given fields: input
func (_m *DepartmentServiceMock) CreateDepartment(input request.DepartmentRequest) (*response.DepartmentResponse, error) {
	ret := _m.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for CreateDepartment")
	}

	var r0 *response.DepartmentResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(request.DepartmentRequest) (*response.DepartmentResponse, error)); ok {
		return rf(input)
	}
	if rf, ok := ret.Get(0).(func(request.DepartmentRequest) *response.DepartmentResponse); ok {
		r0 = rf(input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*response.DepartmentResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(request.DepartmentRequest) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DepartmentServiceMock_CreateDepartment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateDepartment'
type DepartmentServiceMock_CreateDepartment_Call struct {
	*mock.Call
}

// CreateDepartment is a helper method to define mock.On call
//   - input request.DepartmentRequest
func (_e *DepartmentServiceMock_Expecter) CreateDepartment(input interface{}) *DepartmentServiceMock_CreateDepartment_Call {
	return &DepartmentServiceMock_CreateDepartment_Call{Call: _e.mock.On("CreateDepartment", input)}
}

func (_c *DepartmentServiceMock_CreateDepartment_Call) Run(run func(input request.DepartmentRequest)) *DepartmentServiceMock_CreateDepartment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(request.DepartmentRequest))
	})
	return _c
}

func (_c *DepartmentServiceMock_CreateDepartment_Call) Return(_a0 *response.DepartmentResponse, _a1 error) *DepartmentServiceMock_CreateDepartment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DepartmentServiceMock_CreateDepartment_Call) RunAndReturn(run func(request.DepartmentRequest) (*response.DepartmentResponse, error)) *DepartmentServiceMock_CreateDepartment_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteDepartmentById provides a mock function with given fields: id
func (_m *DepartmentServiceMock) DeleteDepartmentById(id uint) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDepartmentById")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DepartmentServiceMock_DeleteDepartmentById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteDepartmentById'
type DepartmentServiceMock_DeleteDepartmentById_Call struct {
	*mock.Call
}

// DeleteDepartmentById is a helper method to define mock.On call
//   - id uint
func (_e *DepartmentServiceMock_Expecter) DeleteDepartmentById(id interface{}) *DepartmentServiceMock_DeleteDepartmentById_Call {
	return &DepartmentServiceMock_DeleteDepartmentById_Call{Call: _e.mock.On("DeleteDepartmentById", id)}
}

func (_c *DepartmentServiceMock_DeleteDepartmentById_Call) Run(run func(id uint)) *DepartmentServiceMock_DeleteDepartmentById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *DepartmentServiceMock_DeleteDepartmentById_Call) Return(_a0 error) *DepartmentServiceMock_DeleteDepartmentById_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DepartmentServiceMock_DeleteDepartmentById_Call) RunAndReturn(run func(uint) error) *DepartmentServiceMock_DeleteDepartmentById_Call {
	_c.Call.Return(run)
	return _c
}

// DepartmentSetTeacher provides a mock function with given fields: departmentId, teacherId
func (_m *DepartmentServiceMock) DepartmentSetTeacher(departmentId uint, teacherId uint) (*response.DepartmentResponse, error) {
	ret := _m.Called(departmentId, teacherId)

	if len(ret) == 0 {
		panic("no return value specified for DepartmentSetTeacher")
	}

	var r0 *response.DepartmentResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, uint) (*response.DepartmentResponse, error)); ok {
		return rf(departmentId, teacherId)
	}
	if rf, ok := ret.Get(0).(func(uint, uint) *response.DepartmentResponse); ok {
		r0 = rf(departmentId, teacherId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*response.DepartmentResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, uint) error); ok {
		r1 = rf(departmentId, teacherId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DepartmentServiceMock_DepartmentSetTeacher_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DepartmentSetTeacher'
type DepartmentServiceMock_DepartmentSetTeacher_Call struct {
	*mock.Call
}

// DepartmentSetTeacher is a helper method to define mock.On call
//   - departmentId uint
//   - teacherId uint
func (_e *DepartmentServiceMock_Expecter) DepartmentSetTeacher(departmentId interface{}, teacherId interface{}) *DepartmentServiceMock_DepartmentSetTeacher_Call {
	return &DepartmentServiceMock_DepartmentSetTeacher_Call{Call: _e.mock.On("DepartmentSetTeacher", departmentId, teacherId)}
}

func (_c *DepartmentServiceMock_DepartmentSetTeacher_Call) Run(run func(departmentId uint, teacherId uint)) *DepartmentServiceMock_DepartmentSetTeacher_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint), args[1].(uint))
	})
	return _c
}

func (_c *DepartmentServiceMock_DepartmentSetTeacher_Call) Return(_a0 *response.DepartmentResponse, _a1 error) *DepartmentServiceMock_DepartmentSetTeacher_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DepartmentServiceMock_DepartmentSetTeacher_Call) RunAndReturn(run func(uint, uint) (*response.DepartmentResponse, error)) *DepartmentServiceMock_DepartmentSetTeacher_Call {
	_c.Call.Return(run)
	return _c
}

// FindAllDepartments provides a mock function with given fields: page, limit
func (_m *DepartmentServiceMock) FindAllDepartments(page int, limit int) ([]*response.DepartmentResponse, error) {
	ret := _m.Called(page, limit)

	if len(ret) == 0 {
		panic("no return value specified for FindAllDepartments")
	}

	var r0 []*response.DepartmentResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) ([]*response.DepartmentResponse, error)); ok {
		return rf(page, limit)
	}
	if rf, ok := ret.Get(0).(func(int, int) []*response.DepartmentResponse); ok {
		r0 = rf(page, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*response.DepartmentResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(page, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DepartmentServiceMock_FindAllDepartments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAllDepartments'
type DepartmentServiceMock_FindAllDepartments_Call struct {
	*mock.Call
}

// FindAllDepartments is a helper method to define mock.On call
//   - page int
//   - limit int
func (_e *DepartmentServiceMock_Expecter) FindAllDepartments(page interface{}, limit interface{}) *DepartmentServiceMock_FindAllDepartments_Call {
	return &DepartmentServiceMock_FindAllDepartments_Call{Call: _e.mock.On("FindAllDepartments", page, limit)}
}

func (_c *DepartmentServiceMock_FindAllDepartments_Call) Run(run func(page int, limit int)) *DepartmentServiceMock_FindAllDepartments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(int))
	})
	return _c
}

func (_c *DepartmentServiceMock_FindAllDepartments_Call) Return(_a0 []*response.DepartmentResponse, _a1 error) *DepartmentServiceMock_FindAllDepartments_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DepartmentServiceMock_FindAllDepartments_Call) RunAndReturn(run func(int, int) ([]*response.DepartmentResponse, error)) *DepartmentServiceMock_FindAllDepartments_Call {
	_c.Call.Return(run)
	return _c
}

// FindDepartmentById provides a mock function with given fields: id
func (_m *DepartmentServiceMock) FindDepartmentById(id uint) (*response.DepartmentResponse, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for FindDepartmentById")
	}

	var r0 *response.DepartmentResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*response.DepartmentResponse, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) *response.DepartmentResponse); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*response.DepartmentResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DepartmentServiceMock_FindDepartmentById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindDepartmentById'
type DepartmentServiceMock_FindDepartmentById_Call struct {
	*mock.Call
}

// FindDepartmentById is a helper method to define mock.On call
//   - id uint
func (_e *DepartmentServiceMock_Expecter) FindDepartmentById(id interface{}) *DepartmentServiceMock_FindDepartmentById_Call {
	return &DepartmentServiceMock_FindDepartmentById_Call{Call: _e.mock.On("FindDepartmentById", id)}
}

func (_c *DepartmentServiceMock_FindDepartmentById_Call) Run(run func(id uint)) *DepartmentServiceMock_FindDepartmentById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *DepartmentServiceMock_FindDepartmentById_Call) Return(_a0 *response.DepartmentResponse, _a1 error) *DepartmentServiceMock_FindDepartmentById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DepartmentServiceMock_FindDepartmentById_Call) RunAndReturn(run func(uint) (*response.DepartmentResponse, error)) *DepartmentServiceMock_FindDepartmentById_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateDepartment provides a mock function with given fields: id, input
func (_m *DepartmentServiceMock) UpdateDepartment(id uint, input request.DepartmentRequest) (*response.DepartmentResponse, error) {
	ret := _m.Called(id, input)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDepartment")
	}

	var r0 *response.DepartmentResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, request.DepartmentRequest) (*response.DepartmentResponse, error)); ok {
		return rf(id, input)
	}
	if rf, ok := ret.Get(0).(func(uint, request.DepartmentRequest) *response.DepartmentResponse); ok {
		r0 = rf(id, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*response.DepartmentResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, request.DepartmentRequest) error); ok {
		r1 = rf(id, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DepartmentServiceMock_UpdateDepartment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateDepartment'
type DepartmentServiceMock_UpdateDepartment_Call struct {
	*mock.Call
}

// UpdateDepartment is a helper method to define mock.On call
//   - id uint
//   - input request.DepartmentRequest
func (_e *DepartmentServiceMock_Expecter) UpdateDepartment(id interface{}, input interface{}) *DepartmentServiceMock_UpdateDepartment_Call {
	return &DepartmentServiceMock_UpdateDepartment_Call{Call: _e.mock.On("UpdateDepartment", id, input)}
}

func (_c *DepartmentServiceMock_UpdateDepartment_Call) Run(run func(id uint, input request.DepartmentRequest)) *DepartmentServiceMock_UpdateDepartment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint), args[1].(request.DepartmentRequest))
	})
	return _c
}

func (_c *DepartmentServiceMock_UpdateDepartment_Call) Return(_a0 *response.DepartmentResponse, _a1 error) *DepartmentServiceMock_UpdateDepartment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DepartmentServiceMock_UpdateDepartment_Call) RunAndReturn(run func(uint, request.DepartmentRequest) (*response.DepartmentResponse, error)) *DepartmentServiceMock_UpdateDepartment_Call {
	_c.Call.Return(run)
	return _c
}

// NewDepartmentServiceMock creates a new instance of DepartmentServiceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDepartmentServiceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *DepartmentServiceMock {
	mock := &DepartmentServiceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
