// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	entity "student_go/internal/entity"

	mock "github.com/stretchr/testify/mock"
)

// StudentRepository is an autogenerated mock type for the Repository type
type StudentRepository struct {
	mock.Mock
}

type StudentRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *StudentRepository) EXPECT() *StudentRepository_Expecter {
	return &StudentRepository_Expecter{mock: &_m.Mock}
}

// Count provides a mock function with no fields
func (_m *StudentRepository) Count() (int, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Count")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func() (int, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StudentRepository_Count_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Count'
type StudentRepository_Count_Call struct {
	*mock.Call
}

// Count is a helper method to define mock.On call
func (_e *StudentRepository_Expecter) Count() *StudentRepository_Count_Call {
	return &StudentRepository_Count_Call{Call: _e.mock.On("Count")}
}

func (_c *StudentRepository_Count_Call) Run(run func()) *StudentRepository_Count_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *StudentRepository_Count_Call) Return(_a0 int, _a1 error) *StudentRepository_Count_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StudentRepository_Count_Call) RunAndReturn(run func() (int, error)) *StudentRepository_Count_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteById provides a mock function with given fields: id
func (_m *StudentRepository) DeleteById(id uint) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteById")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StudentRepository_DeleteById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteById'
type StudentRepository_DeleteById_Call struct {
	*mock.Call
}

// DeleteById is a helper method to define mock.On call
//   - id uint
func (_e *StudentRepository_Expecter) DeleteById(id interface{}) *StudentRepository_DeleteById_Call {
	return &StudentRepository_DeleteById_Call{Call: _e.mock.On("DeleteById", id)}
}

func (_c *StudentRepository_DeleteById_Call) Run(run func(id uint)) *StudentRepository_DeleteById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *StudentRepository_DeleteById_Call) Return(_a0 error) *StudentRepository_DeleteById_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StudentRepository_DeleteById_Call) RunAndReturn(run func(uint) error) *StudentRepository_DeleteById_Call {
	_c.Call.Return(run)
	return _c
}

// ExistsById provides a mock function with given fields: id
func (_m *StudentRepository) ExistsById(id uint) (bool, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for ExistsById")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (bool, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StudentRepository_ExistsById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExistsById'
type StudentRepository_ExistsById_Call struct {
	*mock.Call
}

// ExistsById is a helper method to define mock.On call
//   - id uint
func (_e *StudentRepository_Expecter) ExistsById(id interface{}) *StudentRepository_ExistsById_Call {
	return &StudentRepository_ExistsById_Call{Call: _e.mock.On("ExistsById", id)}
}

func (_c *StudentRepository_ExistsById_Call) Run(run func(id uint)) *StudentRepository_ExistsById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *StudentRepository_ExistsById_Call) Return(_a0 bool, _a1 error) *StudentRepository_ExistsById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StudentRepository_ExistsById_Call) RunAndReturn(run func(uint) (bool, error)) *StudentRepository_ExistsById_Call {
	_c.Call.Return(run)
	return _c
}

// FindAll provides a mock function with given fields: page, limit
func (_m *StudentRepository) FindAll(page int, limit int) ([]entity.Student, error) {
	ret := _m.Called(page, limit)

	if len(ret) == 0 {
		panic("no return value specified for FindAll")
	}

	var r0 []entity.Student
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) ([]entity.Student, error)); ok {
		return rf(page, limit)
	}
	if rf, ok := ret.Get(0).(func(int, int) []entity.Student); ok {
		r0 = rf(page, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Student)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(page, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StudentRepository_FindAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAll'
type StudentRepository_FindAll_Call struct {
	*mock.Call
}

// FindAll is a helper method to define mock.On call
//   - page int
//   - limit int
func (_e *StudentRepository_Expecter) FindAll(page interface{}, limit interface{}) *StudentRepository_FindAll_Call {
	return &StudentRepository_FindAll_Call{Call: _e.mock.On("FindAll", page, limit)}
}

func (_c *StudentRepository_FindAll_Call) Run(run func(page int, limit int)) *StudentRepository_FindAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(int))
	})
	return _c
}

func (_c *StudentRepository_FindAll_Call) Return(_a0 []entity.Student, _a1 error) *StudentRepository_FindAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StudentRepository_FindAll_Call) RunAndReturn(run func(int, int) ([]entity.Student, error)) *StudentRepository_FindAll_Call {
	_c.Call.Return(run)
	return _c
}

// FindById provides a mock function with given fields: id
func (_m *StudentRepository) FindById(id uint) (*entity.Student, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for FindById")
	}

	var r0 *entity.Student
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*entity.Student, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) *entity.Student); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Student)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StudentRepository_FindById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindById'
type StudentRepository_FindById_Call struct {
	*mock.Call
}

// FindById is a helper method to define mock.On call
//   - id uint
func (_e *StudentRepository_Expecter) FindById(id interface{}) *StudentRepository_FindById_Call {
	return &StudentRepository_FindById_Call{Call: _e.mock.On("FindById", id)}
}

func (_c *StudentRepository_FindById_Call) Run(run func(id uint)) *StudentRepository_FindById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *StudentRepository_FindById_Call) Return(_a0 *entity.Student, _a1 error) *StudentRepository_FindById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StudentRepository_FindById_Call) RunAndReturn(run func(uint) (*entity.Student, error)) *StudentRepository_FindById_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: _a0
func (_m *StudentRepository) Save(_a0 *entity.Student) (*entity.Student, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 *entity.Student
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.Student) (*entity.Student, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*entity.Student) *entity.Student); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Student)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.Student) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StudentRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type StudentRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - _a0 *entity.Student
func (_e *StudentRepository_Expecter) Save(_a0 interface{}) *StudentRepository_Save_Call {
	return &StudentRepository_Save_Call{Call: _e.mock.On("Save", _a0)}
}

func (_c *StudentRepository_Save_Call) Run(run func(_a0 *entity.Student)) *StudentRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.Student))
	})
	return _c
}

func (_c *StudentRepository_Save_Call) Return(_a0 *entity.Student, _a1 error) *StudentRepository_Save_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StudentRepository_Save_Call) RunAndReturn(run func(*entity.Student) (*entity.Student, error)) *StudentRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: _a0
func (_m *StudentRepository) Update(_a0 *entity.Student) (*entity.Student, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *entity.Student
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.Student) (*entity.Student, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*entity.Student) *entity.Student); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Student)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.Student) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StudentRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type StudentRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - _a0 *entity.Student
func (_e *StudentRepository_Expecter) Update(_a0 interface{}) *StudentRepository_Update_Call {
	return &StudentRepository_Update_Call{Call: _e.mock.On("Update", _a0)}
}

func (_c *StudentRepository_Update_Call) Run(run func(_a0 *entity.Student)) *StudentRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.Student))
	})
	return _c
}

func (_c *StudentRepository_Update_Call) Return(_a0 *entity.Student, _a1 error) *StudentRepository_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StudentRepository_Update_Call) RunAndReturn(run func(*entity.Student) (*entity.Student, error)) *StudentRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewStudentRepository creates a new instance of StudentRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStudentRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *StudentRepository {
	mock := &StudentRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
