// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	request "student_go/internal/dto/request"

	mock "github.com/stretchr/testify/mock"

	response "student_go/internal/dto/response"
)

// CourseServiceMock is an autogenerated mock type for the Service type
type CourseServiceMock struct {
	mock.Mock
}

type CourseServiceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *CourseServiceMock) EXPECT() *CourseServiceMock_Expecter {
	return &CourseServiceMock_Expecter{mock: &_m.Mock}
}

// Count provides a mock function with no fields
func (_m *CourseServiceMock) Count() (int, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Count")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func() (int, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CourseServiceMock_Count_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Count'
type CourseServiceMock_Count_Call struct {
	*mock.Call
}

// Count is a helper method to define mock.On call
func (_e *CourseServiceMock_Expecter) Count() *CourseServiceMock_Count_Call {
	return &CourseServiceMock_Count_Call{Call: _e.mock.On("Count")}
}

func (_c *CourseServiceMock_Count_Call) Run(run func()) *CourseServiceMock_Count_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *CourseServiceMock_Count_Call) Return(_a0 int, _a1 error) *CourseServiceMock_Count_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CourseServiceMock_Count_Call) RunAndReturn(run func() (int, error)) *CourseServiceMock_Count_Call {
	_c.Call.Return(run)
	return _c
}

// CreateCourse provides a mock function with given fields: input
func (_m *CourseServiceMock) CreateCourse(input request.CourseRequest) (*response.CourseResponse, error) {
	ret := _m.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for CreateCourse")
	}

	var r0 *response.CourseResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(request.CourseRequest) (*response.CourseResponse, error)); ok {
		return rf(input)
	}
	if rf, ok := ret.Get(0).(func(request.CourseRequest) *response.CourseResponse); ok {
		r0 = rf(input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*response.CourseResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(request.CourseRequest) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CourseServiceMock_CreateCourse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCourse'
type CourseServiceMock_CreateCourse_Call struct {
	*mock.Call
}

// CreateCourse is a helper method to define mock.On call
//   - input request.CourseRequest
func (_e *CourseServiceMock_Expecter) CreateCourse(input interface{}) *CourseServiceMock_CreateCourse_Call {
	return &CourseServiceMock_CreateCourse_Call{Call: _e.mock.On("CreateCourse", input)}
}

func (_c *CourseServiceMock_CreateCourse_Call) Run(run func(input request.CourseRequest)) *CourseServiceMock_CreateCourse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(request.CourseRequest))
	})
	return _c
}

func (_c *CourseServiceMock_CreateCourse_Call) Return(_a0 *response.CourseResponse, _a1 error) *CourseServiceMock_CreateCourse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CourseServiceMock_CreateCourse_Call) RunAndReturn(run func(request.CourseRequest) (*response.CourseResponse, error)) *CourseServiceMock_CreateCourse_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteCourseById provides a mock function with given fields: id
func (_m *CourseServiceMock) DeleteCourseById(id uint) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCourseById")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CourseServiceMock_DeleteCourseById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCourseById'
type CourseServiceMock_DeleteCourseById_Call struct {
	*mock.Call
}

// DeleteCourseById is a helper method to define mock.On call
//   - id uint
func (_e *CourseServiceMock_Expecter) DeleteCourseById(id interface{}) *CourseServiceMock_DeleteCourseById_Call {
	return &CourseServiceMock_DeleteCourseById_Call{Call: _e.mock.On("DeleteCourseById", id)}
}

func (_c *CourseServiceMock_DeleteCourseById_Call) Run(run func(id uint)) *CourseServiceMock_DeleteCourseById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *CourseServiceMock_DeleteCourseById_Call) Return(_a0 error) *CourseServiceMock_DeleteCourseById_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CourseServiceMock_DeleteCourseById_Call) RunAndReturn(run func(uint) error) *CourseServiceMock_DeleteCourseById_Call {
	_c.Call.Return(run)
	return _c
}

// FindAllCourse provides a mock function with given fields: page, limit
func (_m *CourseServiceMock) FindAllCourse(page int, limit int) ([]*response.CourseResponse, error) {
	ret := _m.Called(page, limit)

	if len(ret) == 0 {
		panic("no return value specified for FindAllCourse")
	}

	var r0 []*response.CourseResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) ([]*response.CourseResponse, error)); ok {
		return rf(page, limit)
	}
	if rf, ok := ret.Get(0).(func(int, int) []*response.CourseResponse); ok {
		r0 = rf(page, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*response.CourseResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(page, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CourseServiceMock_FindAllCourse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAllCourse'
type CourseServiceMock_FindAllCourse_Call struct {
	*mock.Call
}

// FindAllCourse is a helper method to define mock.On call
//   - page int
//   - limit int
func (_e *CourseServiceMock_Expecter) FindAllCourse(page interface{}, limit interface{}) *CourseServiceMock_FindAllCourse_Call {
	return &CourseServiceMock_FindAllCourse_Call{Call: _e.mock.On("FindAllCourse", page, limit)}
}

func (_c *CourseServiceMock_FindAllCourse_Call) Run(run func(page int, limit int)) *CourseServiceMock_FindAllCourse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(int))
	})
	return _c
}

func (_c *CourseServiceMock_FindAllCourse_Call) Return(_a0 []*response.CourseResponse, _a1 error) *CourseServiceMock_FindAllCourse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CourseServiceMock_FindAllCourse_Call) RunAndReturn(run func(int, int) ([]*response.CourseResponse, error)) *CourseServiceMock_FindAllCourse_Call {
	_c.Call.Return(run)
	return _c
}

// FindCourseById provides a mock function with given fields: id
func (_m *CourseServiceMock) FindCourseById(id uint) (*response.CourseResponse, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for FindCourseById")
	}

	var r0 *response.CourseResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*response.CourseResponse, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) *response.CourseResponse); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*response.CourseResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CourseServiceMock_FindCourseById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindCourseById'
type CourseServiceMock_FindCourseById_Call struct {
	*mock.Call
}

// FindCourseById is a helper method to define mock.On call
//   - id uint
func (_e *CourseServiceMock_Expecter) FindCourseById(id interface{}) *CourseServiceMock_FindCourseById_Call {
	return &CourseServiceMock_FindCourseById_Call{Call: _e.mock.On("FindCourseById", id)}
}

func (_c *CourseServiceMock_FindCourseById_Call) Run(run func(id uint)) *CourseServiceMock_FindCourseById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *CourseServiceMock_FindCourseById_Call) Return(_a0 *response.CourseResponse, _a1 error) *CourseServiceMock_FindCourseById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CourseServiceMock_FindCourseById_Call) RunAndReturn(run func(uint) (*response.CourseResponse, error)) *CourseServiceMock_FindCourseById_Call {
	_c.Call.Return(run)
	return _c
}

// SetTeacherToCourse provides a mock function with given fields: courseId, teacherId
func (_m *CourseServiceMock) SetTeacherToCourse(courseId uint, teacherId uint) (*response.CourseResponse, error) {
	ret := _m.Called(courseId, teacherId)

	if len(ret) == 0 {
		panic("no return value specified for SetTeacherToCourse")
	}

	var r0 *response.CourseResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, uint) (*response.CourseResponse, error)); ok {
		return rf(courseId, teacherId)
	}
	if rf, ok := ret.Get(0).(func(uint, uint) *response.CourseResponse); ok {
		r0 = rf(courseId, teacherId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*response.CourseResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, uint) error); ok {
		r1 = rf(courseId, teacherId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CourseServiceMock_SetTeacherToCourse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetTeacherToCourse'
type CourseServiceMock_SetTeacherToCourse_Call struct {
	*mock.Call
}

// SetTeacherToCourse is a helper method to define mock.On call
//   - courseId uint
//   - teacherId uint
func (_e *CourseServiceMock_Expecter) SetTeacherToCourse(courseId interface{}, teacherId interface{}) *CourseServiceMock_SetTeacherToCourse_Call {
	return &CourseServiceMock_SetTeacherToCourse_Call{Call: _e.mock.On("SetTeacherToCourse", courseId, teacherId)}
}

func (_c *CourseServiceMock_SetTeacherToCourse_Call) Run(run func(courseId uint, teacherId uint)) *CourseServiceMock_SetTeacherToCourse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint), args[1].(uint))
	})
	return _c
}

func (_c *CourseServiceMock_SetTeacherToCourse_Call) Return(_a0 *response.CourseResponse, _a1 error) *CourseServiceMock_SetTeacherToCourse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CourseServiceMock_SetTeacherToCourse_Call) RunAndReturn(run func(uint, uint) (*response.CourseResponse, error)) *CourseServiceMock_SetTeacherToCourse_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateCourse provides a mock function with given fields: id, input
func (_m *CourseServiceMock) UpdateCourse(id uint, input request.CourseRequest) (*response.CourseResponse, error) {
	ret := _m.Called(id, input)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCourse")
	}

	var r0 *response.CourseResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, request.CourseRequest) (*response.CourseResponse, error)); ok {
		return rf(id, input)
	}
	if rf, ok := ret.Get(0).(func(uint, request.CourseRequest) *response.CourseResponse); ok {
		r0 = rf(id, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*response.CourseResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, request.CourseRequest) error); ok {
		r1 = rf(id, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CourseServiceMock_UpdateCourse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateCourse'
type CourseServiceMock_UpdateCourse_Call struct {
	*mock.Call
}

// UpdateCourse is a helper method to define mock.On call
//   - id uint
//   - input request.CourseRequest
func (_e *CourseServiceMock_Expecter) UpdateCourse(id interface{}, input interface{}) *CourseServiceMock_UpdateCourse_Call {
	return &CourseServiceMock_UpdateCourse_Call{Call: _e.mock.On("UpdateCourse", id, input)}
}

func (_c *CourseServiceMock_UpdateCourse_Call) Run(run func(id uint, input request.CourseRequest)) *CourseServiceMock_UpdateCourse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint), args[1].(request.CourseRequest))
	})
	return _c
}

func (_c *CourseServiceMock_UpdateCourse_Call) Return(_a0 *response.CourseResponse, _a1 error) *CourseServiceMock_UpdateCourse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CourseServiceMock_UpdateCourse_Call) RunAndReturn(run func(uint, request.CourseRequest) (*response.CourseResponse, error)) *CourseServiceMock_UpdateCourse_Call {
	_c.Call.Return(run)
	return _c
}

// NewCourseServiceMock creates a new instance of CourseServiceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCourseServiceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *CourseServiceMock {
	mock := &CourseServiceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
