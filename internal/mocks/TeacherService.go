// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	request "student_go/internal/dto/request"

	mock "github.com/stretchr/testify/mock"

	response "student_go/internal/dto/response"
)

// TeacherServiceMock is an autogenerated mock type for the Service type
type TeacherServiceMock struct {
	mock.Mock
}

type TeacherServiceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *TeacherServiceMock) EXPECT() *TeacherServiceMock_Expecter {
	return &TeacherServiceMock_Expecter{mock: &_m.Mock}
}

// Count provides a mock function with no fields
func (_m *TeacherServiceMock) Count() (int, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Count")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func() (int, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TeacherServiceMock_Count_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Count'
type TeacherServiceMock_Count_Call struct {
	*mock.Call
}

// Count is a helper method to define mock.On call
func (_e *TeacherServiceMock_Expecter) Count() *TeacherServiceMock_Count_Call {
	return &TeacherServiceMock_Count_Call{Call: _e.mock.On("Count")}
}

func (_c *TeacherServiceMock_Count_Call) Run(run func()) *TeacherServiceMock_Count_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TeacherServiceMock_Count_Call) Return(_a0 int, _a1 error) *TeacherServiceMock_Count_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TeacherServiceMock_Count_Call) RunAndReturn(run func() (int, error)) *TeacherServiceMock_Count_Call {
	_c.Call.Return(run)
	return _c
}

// CreateTeacher provides a mock function with given fields: input
func (_m *TeacherServiceMock) CreateTeacher(input request.TeacherRequest) (*response.TeacherResponse, error) {
	ret := _m.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for CreateTeacher")
	}

	var r0 *response.TeacherResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(request.TeacherRequest) (*response.TeacherResponse, error)); ok {
		return rf(input)
	}
	if rf, ok := ret.Get(0).(func(request.TeacherRequest) *response.TeacherResponse); ok {
		r0 = rf(input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*response.TeacherResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(request.TeacherRequest) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TeacherServiceMock_CreateTeacher_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTeacher'
type TeacherServiceMock_CreateTeacher_Call struct {
	*mock.Call
}

// CreateTeacher is a helper method to define mock.On call
//   - input request.TeacherRequest
func (_e *TeacherServiceMock_Expecter) CreateTeacher(input interface{}) *TeacherServiceMock_CreateTeacher_Call {
	return &TeacherServiceMock_CreateTeacher_Call{Call: _e.mock.On("CreateTeacher", input)}
}

func (_c *TeacherServiceMock_CreateTeacher_Call) Run(run func(input request.TeacherRequest)) *TeacherServiceMock_CreateTeacher_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(request.TeacherRequest))
	})
	return _c
}

func (_c *TeacherServiceMock_CreateTeacher_Call) Return(_a0 *response.TeacherResponse, _a1 error) *TeacherServiceMock_CreateTeacher_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TeacherServiceMock_CreateTeacher_Call) RunAndReturn(run func(request.TeacherRequest) (*response.TeacherResponse, error)) *TeacherServiceMock_CreateTeacher_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTeacherById provides a mock function with given fields: id
func (_m *TeacherServiceMock) DeleteTeacherById(id uint) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTeacherById")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TeacherServiceMock_DeleteTeacherById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTeacherById'
type TeacherServiceMock_DeleteTeacherById_Call struct {
	*mock.Call
}

// DeleteTeacherById is a helper method to define mock.On call
//   - id uint
func (_e *TeacherServiceMock_Expecter) DeleteTeacherById(id interface{}) *TeacherServiceMock_DeleteTeacherById_Call {
	return &TeacherServiceMock_DeleteTeacherById_Call{Call: _e.mock.On("DeleteTeacherById", id)}
}

func (_c *TeacherServiceMock_DeleteTeacherById_Call) Run(run func(id uint)) *TeacherServiceMock_DeleteTeacherById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *TeacherServiceMock_DeleteTeacherById_Call) Return(_a0 error) *TeacherServiceMock_DeleteTeacherById_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TeacherServiceMock_DeleteTeacherById_Call) RunAndReturn(run func(uint) error) *TeacherServiceMock_DeleteTeacherById_Call {
	_c.Call.Return(run)
	return _c
}

// FindAllTeachers provides a mock function with given fields: page, limit
func (_m *TeacherServiceMock) FindAllTeachers(page int, limit int) ([]*response.TeacherResponse, error) {
	ret := _m.Called(page, limit)

	if len(ret) == 0 {
		panic("no return value specified for FindAllTeachers")
	}

	var r0 []*response.TeacherResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) ([]*response.TeacherResponse, error)); ok {
		return rf(page, limit)
	}
	if rf, ok := ret.Get(0).(func(int, int) []*response.TeacherResponse); ok {
		r0 = rf(page, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*response.TeacherResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(page, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TeacherServiceMock_FindAllTeachers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAllTeachers'
type TeacherServiceMock_FindAllTeachers_Call struct {
	*mock.Call
}

// FindAllTeachers is a helper method to define mock.On call
//   - page int
//   - limit int
func (_e *TeacherServiceMock_Expecter) FindAllTeachers(page interface{}, limit interface{}) *TeacherServiceMock_FindAllTeachers_Call {
	return &TeacherServiceMock_FindAllTeachers_Call{Call: _e.mock.On("FindAllTeachers", page, limit)}
}

func (_c *TeacherServiceMock_FindAllTeachers_Call) Run(run func(page int, limit int)) *TeacherServiceMock_FindAllTeachers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(int))
	})
	return _c
}

func (_c *TeacherServiceMock_FindAllTeachers_Call) Return(_a0 []*response.TeacherResponse, _a1 error) *TeacherServiceMock_FindAllTeachers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TeacherServiceMock_FindAllTeachers_Call) RunAndReturn(run func(int, int) ([]*response.TeacherResponse, error)) *TeacherServiceMock_FindAllTeachers_Call {
	_c.Call.Return(run)
	return _c
}

// FindTeacherById provides a mock function with given fields: id
func (_m *TeacherServiceMock) FindTeacherById(id uint) (*response.TeacherResponse, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for FindTeacherById")
	}

	var r0 *response.TeacherResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*response.TeacherResponse, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) *response.TeacherResponse); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*response.TeacherResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TeacherServiceMock_FindTeacherById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindTeacherById'
type TeacherServiceMock_FindTeacherById_Call struct {
	*mock.Call
}

// FindTeacherById is a helper method to define mock.On call
//   - id uint
func (_e *TeacherServiceMock_Expecter) FindTeacherById(id interface{}) *TeacherServiceMock_FindTeacherById_Call {
	return &TeacherServiceMock_FindTeacherById_Call{Call: _e.mock.On("FindTeacherById", id)}
}

func (_c *TeacherServiceMock_FindTeacherById_Call) Run(run func(id uint)) *TeacherServiceMock_FindTeacherById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *TeacherServiceMock_FindTeacherById_Call) Return(_a0 *response.TeacherResponse, _a1 error) *TeacherServiceMock_FindTeacherById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TeacherServiceMock_FindTeacherById_Call) RunAndReturn(run func(uint) (*response.TeacherResponse, error)) *TeacherServiceMock_FindTeacherById_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTeacher provides a mock function with given fields: id, input
func (_m *TeacherServiceMock) UpdateTeacher(id uint, input request.TeacherRequest) (*response.TeacherResponse, error) {
	ret := _m.Called(id, input)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTeacher")
	}

	var r0 *response.TeacherResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, request.TeacherRequest) (*response.TeacherResponse, error)); ok {
		return rf(id, input)
	}
	if rf, ok := ret.Get(0).(func(uint, request.TeacherRequest) *response.TeacherResponse); ok {
		r0 = rf(id, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*response.TeacherResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, request.TeacherRequest) error); ok {
		r1 = rf(id, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TeacherServiceMock_UpdateTeacher_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTeacher'
type TeacherServiceMock_UpdateTeacher_Call struct {
	*mock.Call
}

// UpdateTeacher is a helper method to define mock.On call
//   - id uint
//   - input request.TeacherRequest
func (_e *TeacherServiceMock_Expecter) UpdateTeacher(id interface{}, input interface{}) *TeacherServiceMock_UpdateTeacher_Call {
	return &TeacherServiceMock_UpdateTeacher_Call{Call: _e.mock.On("UpdateTeacher", id, input)}
}

func (_c *TeacherServiceMock_UpdateTeacher_Call) Run(run func(id uint, input request.TeacherRequest)) *TeacherServiceMock_UpdateTeacher_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint), args[1].(request.TeacherRequest))
	})
	return _c
}

func (_c *TeacherServiceMock_UpdateTeacher_Call) Return(_a0 *response.TeacherResponse, _a1 error) *TeacherServiceMock_UpdateTeacher_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TeacherServiceMock_UpdateTeacher_Call) RunAndReturn(run func(uint, request.TeacherRequest) (*response.TeacherResponse, error)) *TeacherServiceMock_UpdateTeacher_Call {
	_c.Call.Return(run)
	return _c
}

// NewTeacherServiceMock creates a new instance of TeacherServiceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTeacherServiceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *TeacherServiceMock {
	mock := &TeacherServiceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
